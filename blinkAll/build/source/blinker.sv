/*
    This file was generated automatically by Alchitry Labs 2.0.41-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module blinker #(
        parameter MAX_VALUE = 9'h1f4
    ) (
        input wire clk,
        input wire rst,
        output reg out,
        output reg [1:0] bank,
        output reg [2:0] ledNum
    );
    logic [($clog2(MAX_VALUE))-1:0] D_ctr_d, D_ctr_q = 0;
    logic [5:0] D_ctr2_d, D_ctr2_q = 0;
    logic D_led_d, D_led_q = 0;
    always @* begin
        D_ctr_d = D_ctr_q;
        D_led_d = D_led_q;
        D_ctr2_d = D_ctr2_q;
        
        D_ctr_d = (($bits(D_ctr_q) > $bits(1'h1) ? $bits(D_ctr_q) : $bits(1'h1)) + 1)'(D_ctr_q + 1'h1);
        if (D_ctr_q == MAX_VALUE) begin
            D_ctr_d = 1'h0;
            D_led_d = ~D_led_q;
            D_ctr2_d = (($bits(D_ctr2_q) > $bits(1'h1) ? $bits(D_ctr2_q) : $bits(1'h1)) + 1)'(D_ctr2_q + 1'h1);
            if (D_ctr2_q == 6'h2f) begin
                D_ctr2_d = 1'h0;
            end
        end
        out = D_led_q;
        bank = D_ctr2_q >> 3'h4;
        ledNum = (D_ctr2_q >> 1'h1) & 5'h7;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_ctr_q <= 0;
            D_ctr2_q <= 0;
            D_led_q <= 0;
        end else begin
            D_ctr_q <= D_ctr_d;
            D_ctr2_q <= D_ctr2_d;
            D_led_q <= D_led_d;
        end
    end
endmodule