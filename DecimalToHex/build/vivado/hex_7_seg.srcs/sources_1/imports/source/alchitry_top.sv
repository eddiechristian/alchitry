/*
    This file was generated automatically by Alchitry Labs 2.0.41-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip
    );
    logic rst;
    logic [3:0][7:0] segs;
    localparam _MP_STAGES_644973081 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_644973081)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam _MP_NUM_SEGMENTS_330582785 = 3'h4;
    localparam _MP_MAX_VALUE_330582785 = 3'h5;
    logic [7:0] M_seg_multi_out;
    logic [1:0] M_seg_multi_sel;
    
    seven_seg_multiplexer #(
        .NUM_SEGMENTS(_MP_NUM_SEGMENTS_330582785),
        .MAX_VALUE(_MP_MAX_VALUE_330582785)
    ) seg_multi (
        .segs(segs),
        .clk(clk),
        .rst(rst),
        .out(M_seg_multi_out),
        .sel(M_seg_multi_sel)
    );
    
    
    logic [3:0][3:0] M_dec_to_hex_hex_digits;
    logic [3:0] M_dec_to_hex_blank_digits;
    logic [11:0] M_dec_to_hex_arb_out;
    
    display_seven_seg_hex dec_to_hex (
        .decimal(10'h206),
        .clk(clk),
        .rst(rst),
        .hex_digits(M_dec_to_hex_hex_digits),
        .blank_digits(M_dec_to_hex_blank_digits),
        .arb_out(M_dec_to_hex_arb_out)
    );
    
    
    logic [7:0] M_seven_seg1_segs;
    
    seven_seg_digit seven_seg1 (
        .value(M_dec_to_hex_hex_digits[1'h0]),
        .blank(M_dec_to_hex_blank_digits[1'h0]),
        .period(io_dip[2'h2][1'h0]),
        .segs(M_seven_seg1_segs)
    );
    
    
    logic [7:0] M_seven_seg2_segs;
    
    seven_seg_digit seven_seg2 (
        .value(M_dec_to_hex_hex_digits[1'h1]),
        .blank(M_dec_to_hex_blank_digits[1'h1]),
        .period(io_dip[2'h2][1'h0]),
        .segs(M_seven_seg2_segs)
    );
    
    
    logic [7:0] M_seven_seg3_segs;
    
    seven_seg_digit seven_seg3 (
        .value(M_dec_to_hex_hex_digits[2'h2]),
        .blank(M_dec_to_hex_blank_digits[2'h2]),
        .period(io_dip[2'h2][1'h0]),
        .segs(M_seven_seg3_segs)
    );
    
    
    logic [7:0] M_seven_seg4_segs;
    
    seven_seg_digit seven_seg4 (
        .value(M_dec_to_hex_hex_digits[2'h3]),
        .blank(M_dec_to_hex_blank_digits[2'h3]),
        .period(io_dip[2'h2][1'h0]),
        .segs(M_seven_seg4_segs)
    );
    
    
    always @* begin
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        led = 8'h0;
        usb_tx = usb_rx;
        io_led = {{8'h0, 8'h0, 8'h0}};
        io_segment = 8'hff;
        io_select = 4'hf;
        segs = {M_seven_seg4_segs, M_seven_seg3_segs, M_seven_seg2_segs, M_seven_seg1_segs};
        io_segment = M_seg_multi_out ^ 8'hff;
        io_select = (($bits(1'h1)+(2**$bits(M_seg_multi_sel)-1))'(1'h1 << M_seg_multi_sel)) ^ 4'hf;
        io_led[1'h0] = M_dec_to_hex_arb_out[3'h7:1'h0];
        io_led[1'h1][1'h0] = M_dec_to_hex_arb_out[4'h8];
        io_led[1'h1][1'h1] = M_dec_to_hex_arb_out[4'h9];
        io_led[1'h1][2'h2] = M_dec_to_hex_arb_out[4'ha];
    end
    
    
endmodule